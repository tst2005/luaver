
# Returns the current luajit version
__luaver_get_current_luajit_version() {
	local version="$(which luajit)"

	if __luaver_exists "luajit"; then
		version="${version#$__luaver_LUAJIT_DIR/}"
		version="${version%/bin/luajit}"
	else
		version=""
	fi

	eval "$1='$version'"
}

__luaver_html_to_filenames_luajit() {
	grep -o '<a href="download/[Ll]ua[Jj][Ii][Tt][^"]*">' | grep -o '".*"' | sed 's,^[^"]*"\([^"]*\)".*$,\1,g' | while read -r line; do
		line="${line#*download/}" # LuaJIT-#.#.*.EXT
		case "${line%%-*}" in
			(luajit|LuaJIT) ;;
			(*) continue ;;
		esac
		line="${line#*-}"
		case "$line" in
			(*'.tar.gz')	line="${line%.tar.gz}";;
			(*'.zip')	line="${line%.zip}";;
			*) continue
		esac
		printf '%s\n' "$line"
	done | sort -u | sort -g
}

__luaver_available_luajit() {
	local luajit_cachedir=./luajit_index.html
	local url="http://luajit.org/download.html"

	__luaver_exec_command cd -- "${__luaver_SRC_DIR}"

	if [ ! -f "download.html" ]; then
		__luaver_download "$url"
#	else
#		__luaver_print "index already downloaded"
	fi
	if [ ! -f "download.html" ]; then
		__luaver_error "Index not found (No such download.html file)"
		return 1
	fi
	__luaver_print "LuaJIT available :"
	__luaver_html_to_filenames_luajit < download.html
}

__luaver_install_luajit() {
	local version="$1"
	local luajit_dir_name="LuaJIT-${version}"
	local archive_name="${luajit_dir_name}.tar.gz"
	local url="http://luajit.org/download/${archive_name}"

	__luaver_print "Installing ${luajit_dir_name}"

	__luaver_exec_command cd -- "${__luaver_SRC_DIR}"

	__luaver_download_and_unpack $luajit_dir_name $archive_name $url

	__luaver_exec_command cd -- "${luajit_dir_name}"

	__luaver_print "Compiling ${luajit_dir_name}"

	__luaver_exec_command make "PREFIX=${__luaver_LUAJIT_DIR}/${version}"
	__luaver_exec_command make install "PREFIX=${__luaver_LUAJIT_DIR}/${version}"

	read -r -p "${luajit_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: " choice
	case "$choice" in
		([yY][eE][sS]|[yY])
			__luaver_use_luajit $version
		;;
	esac
}

__luaver_use_luajit() {
	local version="$1"
	local luajit_name="LuaJIT-${version}"

	__luaver_print "Switching to ${luajit_name}"

	# Checking if this version exists
	__luaver_exec_command cd -- "${__luaver_LUAJIT_DIR}"

	if [ ! -e $version ]; then
		read -r -p "${luajit_name} is not installed. Want to install it? [Y/n]: " choice
		case "$choice" in
			([yY][eE][sS]|[yY])
				__luaver_install_lua $version
			;;
			(*)
				__luaver_error "Unable to use ${luajit_name}"
			;;
		esac
		return
	fi

	__luaver_remove_previous_paths "${__luaver_LUAJIT_DIR}"
	__luaver_append_path "${__luaver_LUAJIT_DIR}/${version}/bin"

	__luaver_print "Successfully switched to ${luajit_name}"
}

__luaver_set_default_luajit() {
	local version="$1"

	__luaver_exec_command eval "echo \"${version}\" > \"${__luaver_LUAJIT_DEFAULT_FILE}\""
	__luaver_print "Default version set for luajit: ${version}"
}

__luaver_unset_default_luajit() {
	__luaver_exec_command rm -- "${__luaver_LUAJIT_DEFAULT_FILE}"
	__luaver_print "Removed default version for LuaJIT"
}

__luaver_uninstall_luajit() {
	local version="$1"
	local luajit_name="LuaJIT-${version}"

	__luaver_get_current_luajit_version current_version

	__luaver_uninstall $luajit_name $__luaver_LUAJIT_DIR $version

	if [ "${version}" = "${current_version}" ]; then
		__luaver_remove_previous_paths "${__luaver_LUAJIT_DIR}"
	fi
}

__luaver_list_luajit() {
	local installed_versions=($(ls $__luaver_LUAJIT_DIR/))

	__luaver_get_current_luajit_version current_version

	if [ ${#installed_versions[@]} -eq 0 ]; then
		__luaver_print "No version of LuaJIT is installed"
	else
		__luaver_print "Installed versions: "
		for version in "${installed_versions[@]}"; do
			if [ "${version}" = "${current_version}" ]; then
				__luaver_print "LuaJIT-${version} <--"
			else
				__luaver_print "LuaJIT-${version}"
			fi
		done
	fi
}

