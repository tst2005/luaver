
###############################################################################
# Helper functions

# Error handling function
__luaver_error() {
	printf "$1\n" 1>&2
	__luaver_exec_command cd -- "${__luaver_present_dir}"
	kill -INT $$
}

# Printing bold text - TODO
__luaver_print() {
	if [ $__luaver_verbose -ne 0 ]; then
		tput bold
		printf "==>  $1\n"
		tput sgr0
	fi
}

# Printing formatted text
__luaver_print_formatted() {
	printf "${1}\n"
}

# A wrapper function to execute commands on the terminal and exit on error
# Called whenever the execution should stop after any error occurs
__luaver_exec_command() {
	"$@"

	if [ $? -ne 0 ]; then
		__luaver_error "Unable to execute the following command:\n$1\nExiting"
	fi
}

# Perform some initialization
__luaver_init() {
	__luaver_present_dir="$(pwd)"

	if [ ! -d "$__luaver_LUAVER_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUAVER_DIR}"
	fi

	if [ ! -d "$__luaver_SRC_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_SRC_DIR}"
	fi

	if [ ! -d "$__luaver_LUA_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUA_DIR}"
	fi

	if [ ! -d "$__luaver_LUAJIT_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUAJIT_DIR}"
	fi

	if [ ! -d "$__luaver_LUAROCKS_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUAROCKS_DIR}"
	fi

	if [ -f "$__luaver_LUA_DEFAULT_FILE" ]; then
		local lua_version="$(cat -- "$__luaver_LUA_DEFAULT_FILE")"
		__luaver_use_lua $lua_version
	fi

	if [ -f "$__luaver_LUAJIT_DEFAULT_FILE" ]; then
		local luajit_version="$(cat -- "$__luaver_LUAJIT_DEFAULT_FILE")"
		__luaver_use_luajit $luajit_version
	fi

	if [ -f "$__luaver_LUAROCKS_DEFAULT_FILE" ]; then
		local luarocks_version="$(cat -- "$__luaver_LUAROCKS_DEFAULT_FILE")"
		__luaver_use_luarocks $luarocks_version
	fi

	__luaver_verbose=1

	__luaver_exec_command cd -- "${__luaver_present_dir}"
}

# Checking whether a particular tool exists or not
__luaver_exists() {
	case "$1" in
		("lua")
			if [ "$(which lua)" = "${__luaver_LUA_DIR}/"* ]; then
				return 0
			else
				return 1
			fi
		;;
		("luajit")
			if [ "$(which luajit)" = "${__luaver_LUAJIT_DIR}/"* ]; then
				return 0
			else
				return 1
			fi
		;;
		("luarocks")
			if [ "$(which luarocks)" = "${__luaver_LUAROCKS_DIR}/"* ]; then
				return 0
			else
				return 1
			fi
		;;
	esac

	type "$1" >/dev/null 2>&1
}

# Downloads file from a url
__luaver_download() {
	local url="$1"
	local tofile="$2"

	__luaver_print "Downloading from ${url}"

	if __luaver_exists "wget"; then
		if [ -n "$tofile" ]; then
			__luaver_exec_command wget -q -O "$tofile" -- "${url}"
		else
			__luaver_exec_command wget -- "${url}"
		fi
	else
		__luaver_error "'wget' must be installed"
	fi

	__luaver_print "Download successful"
}

# Unpacks an archive
__luaver_unpack() {
	__luaver_print "Unpacking ${1}"

	if __luaver_exists "tar"; then
		__luaver_exec_command tar -xvzf "${1}"
	else
		__luaver_error "'tar' must be installed"
	fi

	__luaver_print "Unpack successful"
}

# Downloads and unpacks an archive
__luaver_download_and_unpack() {
	local unpack_dir_name="$1"
	local archive_name="$2"
	local url="$3"

	__luaver_print "Detecting already downloaded archives"

	# Checking if archive already downloaded or not
	if [ -e $unpack_dir_name ]; then
		read -r -p "${unpack_dir_name} has already been downloaded. Download again? [Y/n]: " choice
		case "$choice" in
			([yY][eE][sS]|[yY])
				__luaver_exec_command rm -r -- "${unpack_dir_name}"
			;;
		esac
	fi

	# Downloading the archive only if it does not exist"
	if [ ! -e $unpack_dir_name ]; then
		__luaver_print "Downloading ${unpack_dir_name}"
		__luaver_download $url
		__luaver_print "Extracting archive"
		__luaver_unpack $archive_name
		__luaver_exec_command rm -- "${archive_name}"
	fi
}

# Removes existing strings starting with a prefix in PATH
__luaver_remove_previous_paths() {
	local prefix="$1"

	local new_path="$(echo "$PATH" | sed \
		-e "s#${prefix}/[^/]*/bin[^:]*:##g" \
		-e "s#:${prefix}/[^/]*/bin[^:]*##g" \
		-e "s#${prefix}/[^/]*/bin[^:]*##g")"

	export PATH="$new_path"
}

# Append to PATH
__luaver_append_path() {
	export PATH="${1}:${PATH}"
}

# Uninstalls lua/luarocks
__luaver_uninstall() {
	local package_name="$1"
	local package_path="$2"
	local package_dir="$3"

	__luaver_print "Uninstalling ${package_name}"

	__luaver_exec_command cd -- "${package_path}"
	if [ ! -e "${package_dir}" ]; then
		__luaver_error "${package_name} is not installed"
	fi

	__luaver_exec_command rm -r -- "${package_dir}"

	__luaver_print "Successfully uninstalled ${package_name}"
}

# Returns the platform
__luaver_get_platform() {
	local platform_str="$(uname | tr "[:upper:]" "[:lower:]")"
	local platforms=("aix" "bsd" "c89" "freebsd" "generic" "linux" "macosx" "mingw" "posix" "solaris")

	__luaver_print "Detecting platform"

	if [[ "${platform_str}" =~ "darwin" ]]; then
		__luaver_print "Platform detected: macosx"
		eval "$1='macosx'"
		return
	fi
	for platform in "${platforms[@]}"; do
		if [[ "${platform_str}" =~ "${platform}" ]]; then
			__luaver_print "Platform detected: ${platform}"
			eval "$1='$platform'"
			return
		fi
	done

	# Default platform
	__luaver_print "Unable to detect platform. Using default 'linux'"
	eval "$1='linux'"
}

__luaver_html_to_filenames() {
	local patt="$1";shift;
	grep -i -o -- "$patt" | grep -o '".*"' | sed 's,^[^"]*"\([^"]*\)".*$,\1,g' \
	| while read -r line; do
		line="${line##*/}" # LuaJIT-#.#.*.EXT || lua-#.#.*.EXT
		case "${line%%-*}" in
			(luajit|LuaJIT) ;;
			(lua) ;;
			(*) continue ;;
		esac
		line="${line#*-}"
		case "$line" in
			(*'.tar.gz')	line="${line%.tar.gz}";;
#			(*'.zip')	line="${line%.zip}";;
			*) continue
		esac
		printf '%s\n' "$line"
	done | sort -u | sort -g
}

__luaver_usage() {
#    __luaver_print_formatted ""
#    __luaver_version
	__luaver_print_formatted "Usage:"
	__luaver_print_formatted "   luaver help                              Displays this message"
	__luaver_print_formatted ""
	__luaver_print_formatted "   luaver install       <name>=<version>    Installs lua-<version>"
	__luaver_print_formatted "   luaver use           <name>=<version>    Switches to lua-<version>"
	__luaver_print_formatted "   luaver set-default   <name>=<version>    Sets <version> as default for lua"
	__luaver_print_formatted "   luaver unset-default                     Unsets the default lua version"
	__luaver_print_formatted "   luaver uninstall     <name>=<version>    Uninstalls lua-<version>"
	__luaver_print_formatted "   luaver list          <name>              Lists installed lua versions"
	__luaver_print_formatted "   luaver available     <name>              Lists available lua versions"
	__luaver_print_formatted ""
	__luaver_print_formatted "   luaver install-lua          <version>    Installs lua-<version>"
	__luaver_print_formatted "   luaver use-lua              <version>    Switches to lua-<version>"
	__luaver_print_formatted "   luaver set-default-lua      <version>    Sets <version> as default for lua"
	__luaver_print_formatted "   luaver unset-default-lua                 Unsets the default lua version"
	__luaver_print_formatted "   luaver uninstall-lua        <version>    Uninstalls lua-<version>"
	__luaver_print_formatted "   luaver list-lua                          Lists installed lua versions"
	__luaver_print_formatted "   luaver available-lua                     Lists available lua versions"
	__luaver_print_formatted ""
	__luaver_print_formatted "   luaver install-luajit       <version>    Installs luajit-<version>"
	__luaver_print_formatted "   luaver use-luajit           <version>    Switches to luajit-<version>"
	__luaver_print_formatted "   luaver set-default-luajit   <version>    Sets <version> as default for luajit"
	__luaver_print_formatted "   luaver unset-default-luajit              Unsets the default luajit version"
	__luaver_print_formatted "   luaver uninstall-luajit     <version>    Uninstalls luajit-<version>"
	__luaver_print_formatted "   luaver list-luajit                       Lists installed luajit versions"
	__luaver_print_formatted "   luaver available-luajit                  Lists available luajit versions"
	__luaver_print_formatted ""
	__luaver_print_formatted "   luaver install-luarocks     <version>    Installs luarocks<version>"
	__luaver_print_formatted "   luaver use-luarocks         <version>    Switches to luarocks-<version>"
	__luaver_print_formatted "   luaver set-default-luarocks <version>    Sets <version> as default for luarocks"
	__luaver_print_formatted "   luaver unset-default-luarocks            Unsets the default luarocks version"
	__luaver_print_formatted "   luaver uninstall-luarocks   <version>    Uninstalls luarocks-<version>"
	__luaver_print_formatted "   luaver list-luarocks                     Lists all installed luarocks versions"
	__luaver_print_formatted "   luaver available-luarocks                Lists available luarocks versions"	# not yet implemented
	__luaver_print_formatted ""
	__luaver_print_formatted "   luaver current                           Lists present versions being used"
	__luaver_print_formatted "   luaver version                           Displays luaver version"
	__luaver_print_formatted ""
	__luaver_print_formatted "Examples:"
	__luaver_print_formatted "   luaver install lua=5.3.1                 # Installs lua version 5.3.1"
	__luaver_print_formatted "   luaver install lua=5.3.0                 # Installs lua version 5.3.0"
	__luaver_print_formatted "   luaver use lua=5.3.1                     # Switches to lua version 5.3.1"
	__luaver_print_formatted "   luaver install-luarocks 2.3.0            # Installs luarocks version 2.3.0"
	__luaver_print_formatted "   luaver uninstall lua=5.3.0               # Uninstalls lua version 5.3.0"
}

__luaver_current() {
	__luaver_get_current_lua_version lua_version
	__luaver_get_current_luajit_version luajit_version
	__luaver_get_current_luarocks_version luarocks_version

	__luaver_print "Current versions:"

	if [ -n "${lua_version}" ]; then
		__luaver_print "lua-${lua_version}"
	fi
	if [ -n "${luajit_version}" ]; then
		__luaver_print "luajit-${luajit_version}"
	fi
	if [ -n "${luarocks_version}" ]; then
		__luaver_print "luarocks-${luarocks_version}"
	fi
}

__luaver_version() {
	__luaver_print_formatted "Lua Version Manager ${__luaver_VERSION}\n"
	__luaver_print_formatted "Developed by Dhaval Kapil <me@dhavalkapil.com>\n"
}

luaver() {
	__luaver_present_dir="$(pwd)"
	local cmd="$1";shift;
	case "$cmd" in
		("help")			__luaver_usage				;;

		("install"|use|set-default|unset-default|uninstall|list|available)
			local nameversion="$1";shift;
			local name=''
			local version=''
			case "$nameversion" in
				(?*'='?*)
					name="${nameversion%%=*}"
					version="${nameversion#*=}"
				;;
				(?*'-'?*'.'?*)
					name="${nameversion%%-*}"
					version="${nameversion#*-}"
				;;
				(*)
					name="${nameversion}"
					version=''
				;;
			esac
			case "$cmd" in
				("set-default")		cmd="set_default"	;;
				("unset-default")	cmd="unset_default"	;;
			esac
			"__luaver_${cmd}_${name}" "$version" "$@"
		;;

		("install-lua")			__luaver_install_lua		"$@"	;;
		("use-lua")			__luaver_use_lua		"$@"	;;
		("set-default-lua")		__luaver_set_default_lua	"$@"	;;
		("unset-default-lua")		__luaver_unset_default_lua	"$@"	;;
		("uninstall-lua")		__luaver_uninstall_lua		"$@"	;;
		("list-lua")			__luaver_list_lua			;;
		("available-lua")		__luaver_available_lua			;;

		("install-luajit")		__luaver_install_luajit		"$@"	;;
		("use-luajit")			__luaver_use_luajit		"$@"	;;
		("set-default-luajit")		__luaver_set_default_luajit	"$@"	;;
		("unset-default-luajit")	__luaver_unset_default_luajit	"$@"	;;
		("uninstall-luajit")		__luaver_uninstall_luajit	"$@"	;;
		("list-luajit")			__luaver_list_luajit			;;
		("available-luajit")		__luaver_available_luajit		;;

		("install-luarocks")		__luaver_install_luarocks	"$@"	;;
		("use-luarocks")		__luaver_use_luarocks		"$@"	;;
		("set-default-luarocks")	__luaver_set_default_luarocks	"$@"	;;
		("unset-default-luarocks")	__luaver_unset_default_luarocks	"$@"	;;
		("uninstall-luarocks")		__luaver_uninstall_luarocks	"$@"	;;
		("list-luarocks")		__luaver_list_luarocks			;;
		("available-luarocks")		__luaver_available_luarocks		;;

		("current")			__luaver_current			;;
		("version")			__luaver_version			;;
		(*)				__luaver_usage				;;
	esac

	__luaver_exec_command cd -- "${__luaver_present_dir}"
}

# Init environment
__luaver_init

# keep only the filename (/path/to/file.name => file.name)
case "${0##*/}" in
	('luaver'|'luaver'.*) luaver "$@" ;;
esac                                                                                                                                                                                             

