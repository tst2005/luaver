#!/bin/bash

# Lua Version Manager
# Managing and switching between different versions of Lua, LuaJIT and Luarocks made easy
#
# Developed by Dhaval Kapil <me@dhavalkapil.com>
#           by TsT <tst2005@gmail.com>
#
# MIT license http://www.opensource.org/licenses/mit-license.php

__luaver_VERSION="1.1.0"

# Directories and files to be used

__luaver_LUAVER_DIR="${HOME}/.luaver"                                      # The luaver directory
__luaver_SRC_DIR="${__luaver_LUAVER_DIR}/src"                              # Source code is downloaded

__luaver_LUA_DIR="${__luaver_LUAVER_DIR}/lua.tmp"                              # Lua      source is built
__luaver_LUAJIT_DIR="${__luaver_LUAVER_DIR}/luajit.tmp"                        # Luajit   source is built
__luaver_LUAROCKS_DIR="${__luaver_LUAVER_DIR}/luarocks.tmp"                    # Luarocks source is built

#__luaver_LUA_DEFAULT_FILE="${__luaver_LUAVER_DIR}/DEFAULT_LUA"             # Lua      default version
#__luaver_LUAJIT_DEFAULT_FILE="${__luaver_LUAVER_DIR}/DEFAULT_LUAJIT"       # Luajit   default version
#__luaver_LUAROCKS_DEFAULT_FILE="${__luaver_LUAVER_DIR}/DEFAULT_LUAROCKS"   # Luarocks default version

# __luaver_getdir src lua 5.3.3
# __luaver_getdir inst lua 5.3.3
# __luaver_getdir default lua
__luaver_getdir() {
	local target="$1";shift
	local product="${1:-unknown}";shift
	case "$product" in
		(lua|luajit|luarocks) ;;
		(".") product='' ;;
		(*) echo >&2 "invalid name $1" ; return 1 ;;
	esac
	case "$target" in
		src)
			printf '%s/%s/%s\n'	"$__luaver_LUAVER_DIR" "src" "$product"
		;;
		tmp)
			printf '%s/%s/%s\n'	"$__luaver_LUAVER_DIR" "tmp" "$product"
		;;
		default)
			printf '%s/%s_%s_%s\n'	"$__luaver_LUAVER_DIR" "default" "$product" "${1:-DEFAULT}"
		;;
		inst)
			local version="${1:-unknown}";shift
			printf '%s/%s/%s/%s\n'	"$__luaver_LUAVER_DIR" "inst" "$product" "$version"
		;;
		(*) echo ERROR; return 1 ;;
	esac
}
__luaver_getbin() {
	local dir="$(__luaver_getdir inst "$@")"
	if [ -x "$dir/bin/$1-$2" ]; then
		echo "$dir/bin/$1-$2"
	elif [ -x "$dir/bin/$1" ]; then
		echo "$dir/bin/$1"
	else
		echo ""
	fi
}

# Directories and files to be used

__luaver_LUAVER_DIR="${HOME}/.luaver"                                      # The luaver directory
__luaver_SRC_DIR="$__luaver_LUAVER_DIR/src"                                # Source code is downloaded

__luaver_LUA_DIR="$(     __luaver_getdir inst lua      .)"                 # Lua      product is installed
__luaver_LUAJIT_DIR="$(  __luaver_getdir inst luajit   .)"                 # Luajit   product is installed
__luaver_LUAROCKS_DIR="$(__luaver_getdir inst luarocks .)"                 # Luarocks product is installed

__luaver_LUA_DEFAULT_FILE="$(     __luaver_getdir default lua     )"       # Lua      default used version
__luaver_LUAJIT_DEFAULT_FILE="$(  __luaver_getdir default luajit  )"       # Luajit   default used version
__luaver_LUAROCKS_DEFAULT_FILE="$(__luaver_getdir default luarocks)"       # Luarocks default used version


# .luaver/
#	src/
#		lua-5.1.5/
#		lua-5.2.4/
#		lua-5.3.3/
#		LuaJIT-2.0.4/
#		LuaJIT-2.1.0-beta2/
#	<product>/<version>/bin/*
#
# .luaver/
#	src/
#		...
#	inst/<product>/<version>/bin/*
#	tmp/

__luaver_present_dir=""

# Verbose level
__luaver_verbose=0

__luaver_available() {
	local product="$1";shift;
	"__luaver_available_$product" "$@";
}
__luaver_install() {
	local product="$1";shift;
	"__luaver_install_$product" "$@";
}
__luaver_list() {
	local product="$1";shift;
	"__luaver_list_$product" "$@";
}
__luaver_set_default() {
	local product="$1";shift
	local version="$1"
	__luaver_exec_command eval "echo \"${version}\" > \"$(__luaver_getdir default "$product")\""
	__luaver_print "Default version set for ${product}: ${version}"
}
__luaver_uninstall() {
	local product="$1";shift;
	"__luaver_uninstall_$product" "$@";
}
__luaver_unset_default() {
	local product="$1";shift;
	__luaver_exec_command rm -- "$(__luaver_getdir default "$product")"
	__luaver_print "Removed default version for ${product}"
}
__luaver_use() {
	local product="$1";shift;
	local version="$1"
	local name="${product}-${version}"
	__luaver_print "Switching to ${name}"
	# Checking if this version exists
	__luaver_exec_command cd -- "$(__luaver_getdir inst "$product" .)"
	if [ ! -e "$version" ]; then
		read -r -p "${name} is not installed. Do you want to install it? [Y/n]: " choice
		case "$choice" in
			([yY][eE][sS]|[yY])
				__luaver_install lua $version
			;;
			(*)
				__luaver_error "Unable to use ${name}"
			;;
		esac
		return
	fi

	__luaver_remove_previous_paths "$(__luaver_getdir inst "$product" .)"
	__luaver_append_path "$(__luaver_getdir inst "$product" .)/${version}/bin"
	__luaver_print "Successfully switched to ${name}"

	# FIXME: hack for luarocks...
	if [ "$product" = "lua" ]; then
		# Checking whether luarocks is in use
		if __luaver_exists "luarocks"; then
			# Checking if lua version of luarocks is consistent
			__luaver_get_current_lua_version_short lua_version_1
			__luaver_get_lua_version_by_current_luarocks lua_version_2
			__luaver_get_current_luarocks_version luarocks_version
			if [ "$lua_version_1" != "$lua_version_2" ]; then
				# Removing earlier version
				__luaver_remove_previous_paths "${__luaver_LUAROCKS_DIR}"
				__luaver_print "Luarocks in use is inconsistent with this lua version"
				__luaver_use_luarocks $luarocks_version
			fi
		fi
	fi
}
__luaver_available_lua() {
	local url="http://www.lua.org/ftp/"
        local htmlfilename="index_lua.html"
	__luaver_exec_command cd -- "${__luaver_SRC_DIR}"
	if [ ! -f "$htmlfilename" ]; then
		__luaver_download "$url" "$htmlfilename"
#	else
#		__luaver_print "index already downloaded"
	fi
	if [ ! -f "$htmlfilename" ]; then
		__luaver_error "Index not found (No such $htmlfilename file)"
		return 1
	fi
	__luaver_print "Lua available :"
	local pattern='<TD CLASS="name"><A HREF="lua-[0-9].*\.tar\.gz">.*</A></TD>'
	__luaver_html_to_filenames "$pattern" '"lua-[0-9].*.tar.gz"' < "$htmlfilename"
}

# Returns the current lua version
__luaver_get_current_lua_version() {
	local version="$(which lua)"
	if __luaver_exists lua; then
		version="${version#$__luaver_LUA_DIR/}"
		version="${version%/bin/lua}"
	else
		version=""
	fi
	eval "$1='$version'"
}


# Returns the current lua version (only the first two numbers)
__luaver_get_current_lua_version_short() {
	local version=""
	if __luaver_exists lua; then
		version="$(lua -e 'print(_VERSION:sub(5))')"
	fi
	eval "$1='$version'"
}
__luaver_install_lua() {
	local version="$1"
	local lua_dir_name="lua-${version}"
	local archive_name="${lua_dir_name}.tar.gz"
	local url="http://www.lua.org/ftp/${archive_name}"
	__luaver_print "Installing ${lua_dir_name}"
	__luaver_exec_command cd -- "${__luaver_SRC_DIR}"
	__luaver_download_and_unpack $lua_dir_name $archive_name $url
	__luaver_get_platform platform
	__luaver_exec_command cd -- "${lua_dir_name}"
	__luaver_print "Compiling ${lua_dir_name}"
	__luaver_exec_command make "${platform}" install "INSTALL_TOP=${__luaver_LUA_DIR}/${version}"
	echo >&2 "${lua_dir_name} successfully installed."
#	read -r -p "${lua_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: " choice
#	case "$choice" in
#		([yY][eE][sS]|[yY])
#			__luaver_use_lua $version
#		;;
#	esac
}
__luaver_list_lua() {
	local installed_versions=($(ls $__luaver_LUA_DIR/))
	__luaver_get_current_lua_version current_version
	if [ ${#installed_versions[@]} -eq 0 ]; then
		__luaver_print "No version of lua is installed"
	else
		__luaver_print "Installed versions: "
		for version in "${installed_versions[@]}"; do
			if [ "${version}" = "${current_version}" ]; then
				__luaver_print "lua-${version} <--"
			else
				__luaver_print "lua-${version}"
			fi
		done
	fi
}
__luaver_set_default_lua() {
	local version="$1"
	__luaver_exec_command eval "echo \"${version}\" > \"${__luaver_LUA_DEFAULT_FILE}\""
	__luaver_print "Default version set for lua: ${version}"
}
__luaver_uninstall_lua() {
	local version="$1"
	local lua_name="lua-${version}"
	__luaver_get_current_lua_version current_version
	__luaver_x_uninstall $lua_name $__luaver_LUA_DIR $version
	if [ "${version}" = "${current_version}" ]; then
		__luaver_remove_previous_paths "${__luaver_LUA_DIR}"
	fi
}
__luaver_unset_default_lua() {
	__luaver_exec_command rm -- "${__luaver_LUA_DEFAULT_FILE}"
	__luaver_print "Removed default version for lua"
}
__luaver_unset_default_lua() {
	__luaver_unset_default lua "$@";
}
__luaver_use_lua() {
	local version="$1"
	local lua_name="lua-${version}"
	__luaver_print "Switching to ${lua_name}"
	# Checking if this version exists
	__luaver_exec_command cd -- "${__luaver_LUA_DIR}"
	if [ ! -e $version ]; then
		read -r -p "${lua_name} is not installed. Do you want to install it? [Y/n]: " choice
		case "$choice" in
			([yY][eE][sS]|[yY])
				__luaver_install_lua $version
			;;
			(*)
				__luaver_error "Unable to use ${lua_name}"
			;;
		esac
		return
	fi
	__luaver_remove_previous_paths "${__luaver_LUA_DIR}"
	__luaver_append_path "${__luaver_LUA_DIR}/${version}/bin"
	__luaver_print "Successfully switched to ${lua_name}"
	# Checking whether luarocks is in use
	if __luaver_exists "luarocks"; then
		# Checking if lua version of luarocks is consistent
		__luaver_get_current_lua_version_short lua_version_1
		__luaver_get_lua_version_by_current_luarocks lua_version_2
		__luaver_get_current_luarocks_version luarocks_version
		if [ $lua_version_1 != $lua_version_2 ]; then
			# Removing earlier version
			__luaver_remove_previous_paths "${__luaver_LUAROCKS_DIR}"
			__luaver_print "Luarocks in use is inconsistent with this lua version"
			__luaver_use_luarocks $luarocks_version
		fi
	fi
}
__luaver_available_luajit() {
	local url="http://luajit.org/download.html"
        local htmlfilename="index_luajit.html"
	__luaver_exec_command cd -- "${__luaver_SRC_DIR}"
	if [ ! -f "$htmlfilename" ]; then
		__luaver_download "$url" "$htmlfilename"
#	else
#		__luaver_print "index already downloaded"
	fi
	if [ ! -f "$htmlfilename" ]; then
		__luaver_error "Index not found (No such $htmlfilename file)"
		return 1
	fi
	__luaver_print "LuaJIT available :"
	__luaver_html_to_filenames '<a href="download/[Ll]ua[Jj][Ii][Tt][^"]*">' '".*"' < "$htmlfilename"
}
# Returns the current luajit version
__luaver_get_current_luajit_version() {
	local version="$(which luajit)"
	if __luaver_exists "luajit"; then
		version="${version#$__luaver_LUAJIT_DIR/}"
		version="${version%/bin/luajit}"
	else
		version=""
	fi
	eval "$1='$version'"
}
__luaver_html_to_filenames_luajit() {
	grep -o '<a href="download/[Ll]ua[Jj][Ii][Tt][^"]*">' | grep -o '".*"' | sed 's,^[^"]*"\([^"]*\)".*$,\1,g' | while read -r line; do
		line="${line#*download/}" # LuaJIT-#.#.*.EXT
		case "${line%%-*}" in
			(luajit|LuaJIT) ;;
			(*) continue ;;
		esac
		line="${line#*-}"
		case "$line" in
			(*'.tar.gz')	line="${line%.tar.gz}";;
			(*'.zip')	line="${line%.zip}";;
			*) continue
		esac
		printf '%s\n' "$line"
	done | sort -u | sort -g
}
__luaver_install_luajit() {
	local version="$1"
	local luajit_dir_name="LuaJIT-${version}"
	local archive_name="${luajit_dir_name}.tar.gz"
	local url="http://luajit.org/download/${archive_name}"
	__luaver_print "Installing ${luajit_dir_name}"
	__luaver_exec_command cd -- "${__luaver_SRC_DIR}"
	__luaver_download_and_unpack $luajit_dir_name $archive_name $url
	__luaver_exec_command cd -- "${luajit_dir_name}"
	__luaver_print "Compiling ${luajit_dir_name}"
	__luaver_exec_command make "PREFIX=${__luaver_LUAJIT_DIR}/${version}"
	__luaver_exec_command make install "PREFIX=${__luaver_LUAJIT_DIR}/${version}"
	read -r -p "${luajit_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: " choice
	case "$choice" in
		([yY][eE][sS]|[yY])
			__luaver_use_luajit $version
		;;
	esac
}
__luaver_list_luajit() {
	local installed_versions=($(ls $__luaver_LUAJIT_DIR/))
	__luaver_get_current_luajit_version current_version
	if [ ${#installed_versions[@]} -eq 0 ]; then
		__luaver_print "No version of LuaJIT is installed"
	else
		__luaver_print "Installed versions: "
		for version in "${installed_versions[@]}"; do
			if [ "${version}" = "${current_version}" ]; then
				__luaver_print "LuaJIT-${version} <--"
			else
				__luaver_print "LuaJIT-${version}"
			fi
		done
	fi
}
__luaver_set_default_luajit() {
	local version="$1"
	__luaver_exec_command eval "echo \"${version}\" > \"${__luaver_LUAJIT_DEFAULT_FILE}\""
	__luaver_print "Default version set for luajit: ${version}"
}
__luaver_uninstall_luajit() {
	local version="$1"
	local luajit_name="LuaJIT-${version}"
	__luaver_get_current_luajit_version current_version
	__luaver_x_uninstall $luajit_name $__luaver_LUAJIT_DIR $version
	if [ "${version}" = "${current_version}" ]; then
		__luaver_remove_previous_paths "${__luaver_LUAJIT_DIR}"
	fi
}
__luaver_unset_default_luajit() {
	__luaver_exec_command rm -- "${__luaver_LUAJIT_DEFAULT_FILE}"
	__luaver_print "Removed default version for LuaJIT"
}
__luaver_use_luajit() {
	local version="$1"
	local luajit_name="LuaJIT-${version}"
	__luaver_print "Switching to ${luajit_name}"
	# Checking if this version exists
	__luaver_exec_command cd -- "${__luaver_LUAJIT_DIR}"
	if [ ! -e $version ]; then
		read -r -p "${luajit_name} is not installed. Want to install it? [Y/n]: " choice
		case "$choice" in
			([yY][eE][sS]|[yY])
				__luaver_install_lua $version
			;;
			(*)
				__luaver_error "Unable to use ${luajit_name}"
			;;
		esac
		return
	fi
	__luaver_remove_previous_paths "${__luaver_LUAJIT_DIR}"
	__luaver_append_path "${__luaver_LUAJIT_DIR}/${version}/bin"
	__luaver_print "Successfully switched to ${luajit_name}"
}

# Returns the current luarocks version
__luaver_get_current_luarocks_version() {
	local version="$(which luarocks)"
	if __luaver_exists "luarocks"; then
		version="${version#$__luaver_LUAROCKS_DIR/}"
		version="${version%/bin/luarocks}"
		version="${version%_*}"
	else
		version=""
	fi
	eval "$1='$version'"
}

# Returns the short lua version being supported by present luarocks
__luaver_get_lua_version_by_current_luarocks() {
	local version="$(which luarocks)"
	if __luaver_exists "luarocks"; then
		version="${version#$__luaver_LUAROCKS_DIR/}"
		version="${version%/bin/luarocks}"
		version="${version#*_}"
	else
		version=""
	fi
	eval "$1='$version'"
}
__luaver_install_luarocks() {
	# Checking whether any version of lua is installed or not
	__luaver_get_current_lua_version lua_version
	if [ -z "${lua_version}" ]; then
		__luaver_error "No lua version set"
	fi
	__luaver_get_current_lua_version_short lua_version_short
	local version="$1"
	local luarocks_dir_name="luarocks-${version}"
	local archive_name="${luarocks_dir_name}.tar.gz"
	local url="http://luarocks.org/releases/${archive_name}"
	__luaver_print "Installing ${luarocks_dir_name} for lua version ${lua_version}"
	__luaver_exec_command cd -- "${__luaver_SRC_DIR}"
	__luaver_download_and_unpack $luarocks_dir_name $archive_name $url
	__luaver_exec_command cd -- "${luarocks_dir_name}"
	__luaver_print "Compiling ${luarocks_dir_name}"
	__luaver_exec_command ./configure \
		"--prefix=${__luaver_LUAROCKS_DIR}/${version}_${lua_version_short}" \
		"--with-lua=${__luaver_LUA_DIR}/${lua_version}" \
		"--with-lua-bin=${__luaver_LUA_DIR}/${lua_version}/bin" \
		"--with-lua-include=${__luaver_LUA_DIR}/${lua_version}/include" \
		"--with-lua-lib=${__luaver_LUA_DIR}/${lua_version}/lib" \
		"--versioned-rocks-dir"
	__luaver_exec_command make build
	__luaver_exec_command make install
	read -r -p "${luarocks_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: " choice
	case "$choice" in
		([yY][eE][sS]|[yY])
			__luaver_use_luarocks $version
		;;
	esac
}
__luaver_list_luarocks() {
	local installed_versions=($(ls $__luaver_LUAROCKS_DIR/))
	__luaver_get_current_luarocks_version current_luarocks_version
	__luaver_get_lua_version_by_current_luarocks current_lua_version
	if [ ${#installed_versions[@]} -eq 0 ]; then
		__luaver_print "No version of luarocks is installed"
	else
		__luaver_print "Installed versions: "
		for version in "${installed_versions[@]}"; do
			luarocks_version="${version%_*}"
			lua_version="${version#*_}"
			if [ "${luarocks_version}" = "${current_luarocks_version}" ] && [ "${lua_version}" = "${current_lua_version}" ]; then
				__luaver_print "luarocks-${luarocks_version} (lua version: ${lua_version}) <--"
			else
				__luaver_print "luarocks-${luarocks_version} (lua version: ${lua_version})"
			fi
		done
	fi
}
__luaver_set_default_luarocks() {
	local version="$1"
	__luaver_exec_command eval "echo \"${version}\" > \"${__luaver_LUAROCKS_DEFAULT_FILE}\""
	__luaver_print "Default version set for luarocks: ${version}"
}
__luaver_uninstall_luarocks() {
	local version="$1"
	local luarocks_name="luarocks-${version}"
	__luaver_get_current_lua_version_short lua_version
	__luaver_get_current_luarocks_version current_version
	__luaver_print "${luarocks_name} will be uninstalled for lua version ${lua_version}"
	__luaver_x_uninstall $luarocks_name $__luaver_LUAROCKS_DIR "${version}_${lua_version}"
	if [ "${version}" = "${current_version}" ]; then
		__luaver_remove_previous_paths "${__luaver_LUAROCKS_DIR}"
	fi
}
__luaver_unset_default_luarocks() {
	__luaver_exec_command rm -- "${__luaver_LUAROCKS_DEFAULT_FILE}"
	__luaver_print "Removed default version for luarocks"
}
__luaver_use_luarocks() {
	local version="$1"
	local luarocks_name="luarocks-${version}"
	__luaver_get_current_lua_version_short lua_version
	if [ -z "${lua_version}" ]; then
		__luaver_error "You need to first switch to a lua installation"
	fi
	__luaver_print "Switching to ${luarocks_name} with lua version: ${lua_version}"
	# Checking if this version exists
	__luaver_exec_command cd -- "${__luaver_LUAROCKS_DIR}"
	if [ ! -e "${version}_${lua_version}" ]; then
		read -r -p "${luarocks_name} is not installed with lua version ${lua_version}. Want to install it? [Y/n]: " choice
		case "$choice" in
			([yY][eE][sS]|[yY])
				__luaver_install_luarocks $version
			;;
			(*)
				__luaver_error "Unable to use ${luarocks_name}"
			;;
		esac
		return
	fi
	__luaver_remove_previous_paths "${__luaver_LUAROCKS_DIR}"
	__luaver_append_path "${__luaver_LUAROCKS_DIR}/${version}_${lua_version}/bin"
	# Setting up LUA_PATH and LUA_CPATH
	eval $(luarocks path)
	__luaver_print "Successfully switched to ${luarocks_name}"
}

###############################################################################
# Helper functions


# Removes existing strings starting with a prefix in PATH
__luaver_remove_previous_paths() {
	local prefix="$1"
	local new_path="$(echo "$PATH" | sed \
		-e "s#${prefix}/[^/]*/bin[^:]*:##g" \
		-e "s#:${prefix}/[^/]*/bin[^:]*##g" \
		-e "s#${prefix}/[^/]*/bin[^:]*##g")"
	export PATH="$new_path"
}

# Append to PATH
__luaver_append_path() {
	export PATH="${1}:${PATH}"
}


# Error handling function
__luaver_error() {
	printf "$1\n" 1>&2
	__luaver_exec_command cd -- "${__luaver_present_dir}"
	kill -INT $$
}

# Printing bold text - TODO
__luaver_print() {
	if [ $__luaver_verbose -ne 0 ]; then
		tput bold
		printf "==>  $1\n"
		tput sgr0
	fi
}

# Printing formatted text
__luaver_print_formatted() {
	printf "%s"'\n' "${1}"
}

# A wrapper function to execute commands on the terminal and exit on error
# Called whenever the execution should stop after any error occurs
__luaver_exec_command() {
	"$@"
	if [ $? -ne 0 ]; then
		__luaver_error "Unable to execute the following command:\n$1\nExiting"
	fi
}

# Perform some initialization
__luaver_init() {
	__luaver_present_dir="$(pwd)"
	if [ ! -d "$__luaver_LUAVER_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUAVER_DIR}"
	fi
	if [ ! -d "$__luaver_SRC_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_SRC_DIR}"
	fi
	if [ ! -d "$__luaver_LUA_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUA_DIR}"
	fi
	if [ ! -d "$__luaver_LUAJIT_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUAJIT_DIR}"
	fi
	if [ ! -d "$__luaver_LUAROCKS_DIR" ]; then
		__luaver_exec_command mkdir -- "${__luaver_LUAROCKS_DIR}"
	fi
	if [ -f "$__luaver_LUA_DEFAULT_FILE" ]; then
		local lua_version="$(cat -- "$__luaver_LUA_DEFAULT_FILE")"
		__luaver_use_lua $lua_version
	fi
	if [ -f "$__luaver_LUAJIT_DEFAULT_FILE" ]; then
		local luajit_version="$(cat -- "$__luaver_LUAJIT_DEFAULT_FILE")"
		__luaver_use_luajit $luajit_version
	fi
	if [ -f "$__luaver_LUAROCKS_DEFAULT_FILE" ]; then
		local luarocks_version="$(cat -- "$__luaver_LUAROCKS_DEFAULT_FILE")"
		__luaver_use_luarocks $luarocks_version
	fi
	__luaver_verbose=1
	__luaver_exec_command cd -- "${__luaver_present_dir}"
}

# Checking whether a particular tool exists or not
__luaver_exists() {
	case "$1" in
		("lua")
			case "$(which lua)" in
				("${__luaver_LUA_DIR}/"*) return 0 ;;
			esac
			return 1
			#if [ "$(which lua)" = "${__luaver_LUA_DIR}/"* ]; then
			#	return 0
			#else
			#	return 1
			#fi
		;;
		("luajit")
			case "$(which luajit)" in
				("${__luaver_LUAJIT_DIR}/"*) return 0 ;;
			esac
			return 1
			#if [ "$(which luajit)" = "${__luaver_LUAJIT_DIR}/"* ]; then
			#	return 0
			#else
			#	return 1
			#fi
		;;
		("luarocks")
			case "$(which luarocks)" in
				("${__luaver_LUAROCKS_DIR}/"*) return 0 ;;
			esac
			return 1
			#if [ "$(which luarocks)" = "${__luaver_LUAROCKS_DIR}/"* ]; then
			#	return 0
			#else
			#	return 1
			#fi
		;;
	esac

	type "$1" >/dev/null 2>&1
}

# Downloads file from a url
__luaver_download() {
	local url="$1"
	local tofile="$2"
	__luaver_print "Downloading from ${url}"
	if __luaver_exists "wget"; then
		if [ -n "$tofile" ]; then
			__luaver_exec_command wget -q -O "$tofile" -- "${url}"
		else
			__luaver_exec_command wget -- "${url}"
		fi
	else
		__luaver_error "'wget' must be installed"
	fi
	__luaver_print "Download successful"
}

# Unpacks an archive
__luaver_unpack() {
	__luaver_print "Unpacking ${1}"
	if __luaver_exists "tar"; then
		__luaver_exec_command tar -xvzf "${1}"
	else
		__luaver_error "'tar' must be installed"
	fi
	__luaver_print "Unpack successful"
}

# Downloads and unpacks an archive
__luaver_download_and_unpack() {
	local unpack_dir_name="$1"
	local archive_name="$2"
	local url="$3"
	__luaver_print "Detecting already downloaded archives"
	# Checking if archive already downloaded or not
	if [ -e $unpack_dir_name ]; then
		read -r -p "${unpack_dir_name} has already been downloaded. Download again? [Y/n]: " choice
		case "$choice" in
			([yY][eE][sS]|[yY])
				__luaver_exec_command rm -r -- "${unpack_dir_name}"
			;;
		esac
	fi
	# Downloading the archive only if it does not exist"
	if [ ! -e $unpack_dir_name ]; then
		__luaver_print "Downloading ${unpack_dir_name}"
		__luaver_download $url
		__luaver_print "Extracting archive"
		__luaver_unpack $archive_name
		__luaver_exec_command rm -- "${archive_name}"
	fi
}

# Uninstalls lua/luarocks
__luaver_x_uninstall() {
	local package_name="$1"
	local package_path="$2"
	local package_dir="$3"
	__luaver_print "Uninstalling ${package_name}"
	__luaver_exec_command cd -- "${package_path}"
	if [ ! -e "${package_dir}" ]; then
		__luaver_error "${package_name} is not installed"
	fi
	__luaver_exec_command rm -r -- "${package_dir}"
	__luaver_print "Successfully uninstalled ${package_name}"
}

# Returns the platform
__luaver_get_platform() {
	local platform_str="$(uname | tr "[:upper:]" "[:lower:]")"
	local platforms=("aix" "bsd" "c89" "freebsd" "generic" "linux" "macosx" "mingw" "posix" "solaris")
	__luaver_print "Detecting platform"
	if [[ "${platform_str}" =~ "darwin" ]]; then
		__luaver_print "Platform detected: macosx"
		eval "$1='macosx'"
		return
	fi
	for platform in "${platforms[@]}"; do
		if [[ "${platform_str}" =~ "${platform}" ]]; then
			__luaver_print "Platform detected: ${platform}"
			eval "$1='$platform'"
			return
		fi
	done
	# Default platform
	__luaver_print "Unable to detect platform. Using default 'linux'"
	eval "$1='linux'"
}

__luaver_html_to_filenames() {
	local patt="$1";shift;
	local patt2="$1";shift;
	grep -i -o -- "$patt" | grep -o "$patt2" | sed 's,^[^"]*"\([^"]*\)".*$,\1,g' \
	| while read -r line; do
		line="${line##*/}" # LuaJIT-#.#.*.EXT || lua-#.#.*.EXT
		case "${line%%-*}" in
			(luajit|LuaJIT) ;;
			(lua) ;;
			(*)
				echo >&2 "__luaver_html_to_filenames: continue after ${line%%-*}"
				continue ;;
		esac
		line="${line#*-}"
		case "$line" in
			(*'.tar.gz')	line="${line%.tar.gz}";;
#			(*'.zip')	line="${line%.zip}";;
			*) continue
		esac
		printf '%s\n' "$line"
	done | sort -u | sort -g
}

__luaver_usage() {
	__luaver_print_formatted "Usage:"
	__luaver_print_formatted "   luaver help                                 Displays this message"
	__luaver_print_formatted "   luaver version                              Displays luaver version"
	__luaver_print_formatted ""
	__luaver_print_formatted "   luaver install       <product>=<version>    Installs <product>-<version>"
	__luaver_print_formatted "   luaver use           <product>=<version>    Switches to <product>-<version>"
	__luaver_print_formatted "   luaver set-default   <product>=<version>    Sets <version> as default for <product>"
	__luaver_print_formatted "   luaver unset-default <product>              Unsets the default <product> version"
	__luaver_print_formatted "   luaver uninstall     <product>=<version>    Uninstalls <name>-<version>"
	__luaver_print_formatted "   luaver list          <product>              Lists installed product versions"
	__luaver_print_formatted "   luaver available     <product>              Lists available product versions"
	__luaver_print_formatted ""
	__luaver_print_formatted "   luaver current|list                         Lists present versions being used"
	__luaver_print_formatted ""
	__luaver_print_formatted "Examples:"
	__luaver_print_formatted "   luaver install lua=5.3.1                 # Installs lua version 5.3.1"
	__luaver_print_formatted "   luaver install lua=5.3.0                 # Installs lua version 5.3.0"
	__luaver_print_formatted "   luaver use     lua=5.3.1                 # Switches to lua version 5.3.1"
	__luaver_print_formatted "   luaver install luarocks=2.3.0            # Installs luarocks version 2.3.0"
	__luaver_print_formatted "   luaver uninstall lua=5.3.0               # Uninstalls lua version 5.3.0"
}

__luaver_current() {
	__luaver_get_current_lua_version lua_version
	__luaver_get_current_luajit_version luajit_version
	__luaver_get_current_luarocks_version luarocks_version
	__luaver_print "Current versions:"
	if [ -n "${lua_version}" ]; then
		__luaver_print "lua-${lua_version}"
	fi
	if [ -n "${luajit_version}" ]; then
		__luaver_print "luajit-${luajit_version}"
	fi
	if [ -n "${luarocks_version}" ]; then
		__luaver_print "luarocks-${luarocks_version}"
	fi
}

__luaver_version() {
	__luaver_print_formatted "Lua Version Manager ${__luaver_VERSION}"
	__luaver_print_formatted "Developed by Dhaval Kapil <me@dhavalkapil.com>"
	__luaver_print_formatted "          by TsT          <tst2005@gmail.com>"
}

luaver() {
	__luaver_present_dir="$(pwd)"
	local cmd="$1";shift;
	case "$cmd" in
		("help") __luaver_usage; return 0 ;;
		("list")
			if [ $# -eq 0 ]; then
				__luaver_current
				return $?
			fi
		;;
	esac
	case "$cmd" in
		(a|av|ava|avai|avail|availa|availab|availabl|available) cmd=available ;;
		#current
		(i|in|ins|inst|insta|instal|install) cmd=install ;;
		(l|li|lis|list) cmd=list ;;
		#set-default
		#unset-default
		#uninstall
		(us|use) cmd=use ;;
		#version
	esac
	case "$cmd" in
		("install"|use|set-default|unset-default|uninstall|list|available)
			local productversion="$1";shift;
			local product=''
			local version=''
			case "$productversion" in
				(?*'='?*)
					product="${productversion%%=*}"
					version="${productversion#*=}"
				;;
				(?*'-'?*'.'?*)
					product="${productversion%%-*}"
					version="${productversion#*-}"
				;;
				(*)
					product="${productversion}"
					version=''
				;;
			esac
			case "$cmd" in
				("set-default")		cmd="set_default"	;;
				("unset-default")	cmd="unset_default"	;;
			esac
			"__luaver_${cmd}" "${product}" "$version" "$@"
		;;
		("current")			__luaver_current			;;
		("version")			__luaver_version			;;
		("getbin")			__luaver_getbin "$@"; return $?		;;
		("getdir")			__luaver_getdir inst "$@"; return $?	;;
		(*)				__luaver_usage; return 1		;;
	esac
	__luaver_exec_command cd -- "${__luaver_present_dir}"
}

# Init environment
__luaver_init

# keep only the filename (/path/to/file.name => file.name)
case "${0##*/}" in
	('luaver'|'luaver'.*) luaver "$@" ;;
esac
